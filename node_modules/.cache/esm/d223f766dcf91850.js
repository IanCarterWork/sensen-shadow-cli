let ora;_dcf‍.w("ora",[["default",["ora"],function(v){ora=v}]]);/**
 * Requires
 */



const { exec } = require('child_process');

const fs = require('fs');

const fse = require('fs-extra');

const path = require('path');







/**
 * Sensen CLI
 */
const SensenCli = {
    
    Version: 1,
    
    VersionString: '0.0.1',

    VersionName: 'Shadow',

    Resposites:{

        Default: {

            URL: `https://github.com/IanCarterWork/sensen-shadow-project.git`

        }
        
    },


}


/**
 * Sensen CLI::Log
 */
SensenCli.Log = {}




/**
 * Sensen CLI::Log::Message
 */
SensenCli.Log.Message = (title = '', message = '')=>{

    _dcf‍.g.console.log(

        "\x1b[40m", 
        "\x1b[37m", 
        
        title || '', 
        
        '\x1b[0m', 
        
        // '\n', 
        
        message||''
        
    )
                
    return SensenCli.Log;
    
}




/**
 * Sensen CLI::Log::Success
 */
SensenCli.Log.Success = (title = '', message = '')=>{

    _dcf‍.g.console.log(

        "\x1b[42m", 
        
        "\x1b[37m", 
        
        title || '', 
        
        '\x1b[0m', 
        
        // ':', 
        
        message||''
        
    )
           
    return SensenCli.Log;

}

/**
 * Sensen CLI::Log::Error
 */
SensenCli.Log.Error = (title = '', message = '')=>{

    _dcf‍.g.console.error(

        '\x1b[31m',
        
        title || '', 
        
        '\x1b[0m', 
        
        // ':', 
        
        message||''
        
    )

    return SensenCli.Log;
                
}







/**
 * Waiting
 */
SensenCli.Waiting = function(){
    
    // const cliSpinners = require('cli-spinners');

    // cliSpinners.bounce.interval = 10

    // console.log( cliSpinners.bounce );


    const spinner = ora('Loading unicorns').start();

    setTimeout(() => {
        spinner.color = 'yellow';
        spinner.text = 'Loading rainbows';
    }, 1000);


}







/**
 * Move Template to Project
 */
SensenCli.InitTemplateProject = function(){

    fse.copySync(from, to,{ overwrite: true }, function (err) {

        if (err){

            SensenCli.Log.Error('Mounting failed', err )

        } 
        
    });

}







/**
 * Sensen Command Exectutor
 * @args Process arguments
 */
SensenCli.Command = function(args){

    const $CWD = process.cwd();
    

    switch(args[2] || null){


        /**
         * Create New Project
         */
        case 'create':

            const name = args[3] || null;
            
            if(name){

                const tplKey = args[4] || 0;

                const template = this.Resposites[ tplKey ] || this.Resposites.Default;


                if(template){

                    const cmd = `git clone ${ template.URL } ${ $CWD }/.sensen-cache/${ name }`;
                    
                    
                    this.Log.Message('Initialization', `${ name }...`)

                    // this.Log.Message('Path Project', `${ cmd }`)

                    this.Waiting()
    
                    exec(`${ cmd }`, ()=>{

                        this.Log.Success('Success', `Template Donwloadded`)
                        
                    })
    
                    
                }

                else{

                    this.Log.Error('Template Error', `this template < ${ tplKey } > is not found`)
                
                }

                
            }

            else{

                this.Log.Error('Project Manager', 'Veuillez indiquer le nom de votre projet')
                
            }

        break;




        /**
         * No Command
         */
        default:

            this.Log.Message(
                
                'Sensen', 
                
                `${ this.VersionName }, ${ this.Version } (${ this.VersionString })`

            )

        
        break;

        
        
    }
    

    return SensenCli
    
}








/**
 * Sensen Bootstrap
 */
SensenCli.Boot = function(args){

    // console.log('Sensen Running\n', args)

    return this.Command(args)
    
}




module.exports = SensenCli;