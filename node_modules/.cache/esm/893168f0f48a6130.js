
/**
 * Requires
 */

require = require('esm')(module /*, options*/);

const { exec } = require('child_process');

const fs = require('fs');

const fse = require('fs-extra');

const path = require('path');

const rimraf = require("rimraf");

const cliProgress = require('cli-progress');

 
 
 /**
  * Sensen Dependencies
  */

const ProjectManager = require('./project.js')

const SensenCli = require('./Sensen');

const ScanDirectory = require('./ScanDirectory');

const GetRawFile = require('./GetRawFile');

const SetRawFile = require('./SetRawFile');

const { LogError, LogMessage, LogSuccess } = require('./LogNotice.js');
const Module = require('module');





const RouterItemScheme = {

    slug: '',

    source: '',

    status: false,
    
    controller: (r=>undefined),

    mounted: (r=>undefined),

    unmounted: (r=>undefined),

}


const RouterOptionsScheme = {

    default: '',

}


const RouterScheme = {

    /**
     * @type { RouterOptionsScheme }
     */
    options: {},

    /**
     * @type { string[] }
     */
    items:[]
    
}




/**
 * 
 * @param { '-default:view' | '-bind:view' | '-unbind:view' | '-bound' | '-purge' | '-clean' | '-build' } fn 
 * @param { string[] } views 
 */
function RouterManager(fn, views = []){

    const projectSlug = 'router'
    
    const $ProjectDir = `${ process.cwd() }`;
    


    switch(fn){




        /**
         * Definir une vue par defaut
         */
        case '-default:view':

            if(views){

                /**
                 * @type { RouterScheme }
                 */
                const store = ProjectManager.LoadConfig(projectSlug, RouterScheme);

                const view = (Array.isArray(views)) ? views[0] : (typeof views == 'string' ? view : null)

                if(view){

                    store.options = (typeof store.options == 'object') ? store.options : RouterOptionsScheme;
    
                    store.options.default = (typeof view == 'string' && view) ? view : store.options.default;
                    
                    LogSuccess('Vue par defaut', view)
     
                    
                    ProjectManager.SaveConfig(projectSlug, store)
                        
                }

                else{

                    LogError('Router', `Route non valide`)
                
                }
                
                LogMessage('Terminé', '')
 
            }

            else{

                LogError('Router', `Veuillez indiquer de la vue à definir par defaut`)
                
            }

        break;
        




        /**
         * Ajouter une vue au router
         */
        case '-bind:view':

            if(views){

                views = (Array.isArray(views)) ? views : []

                
                /**
                 * @type { RouterScheme }
                 */
                const store = ProjectManager.LoadConfig(projectSlug, RouterScheme);

                store.items = (typeof store.items == 'object' && store.items) ? store.items : [];

                store.items = (Array.isArray(store.items)) ? store.items : [];
                


                views.forEach(view=>{

                    /**
                     * Petit système de purge
                     */
                    if(store.items.indexOf( view ) === -1){
        
                        store.items.push(view)
                            
                        LogSuccess('Liaison', view)
                    
                    }

                    else{

                        LogMessage('Existe déjà', view)
 
                    }
                        

                })


                ProjectManager.SaveConfig(projectSlug, store)

                LogMessage('Terminé', '')
 
                
            }

            else{

                LogError('Router', `Veuillez indiquer de la vue à definir par defaut`)
                
            }

        break;
        



        /**
         * Supprimer une vue du router
         */
        case '-unbind:view':

            if(views){

                views = (Array.isArray(views)) ? views : []

                
                /**
                 * @type { RouterScheme }
                 */
                const store = ProjectManager.LoadConfig(projectSlug, RouterScheme);

                store.items = (typeof store.items == 'object' && store.items) ? store.items : [];

                store.items = (Array.isArray(store.items)) ? store.items : [];
                
                const nitems = []



                store.items.forEach(view=>{

                    if(views.indexOf(view) > -1){

                        LogError(`Supprimé`, view)
                    
                    }

                    else{
                    
                        nitems.push(view)
                           
                    }

                })


                store.items = nitems;

                ProjectManager.SaveConfig(projectSlug, store)

                LogMessage('Terminé', '')
 
                
            }

            else{

                LogError('Router', `Veuillez indiquer de la vue à definir par defaut`)
                
            }

        break;
        
        

        



        /**
         * Supprimer une vue du router
         */
        case '-bound':

            if(views){

                views = (Array.isArray(views)) ? views : []

                
                /**
                 * @type { RouterScheme }
                 */
                const store = ProjectManager.LoadConfig(projectSlug, RouterScheme);

                store.items = (typeof store.items == 'object' && store.items) ? store.items : [];

                store.items = (Array.isArray(store.items)) ? store.items : [];


                store.items.forEach(view=>{

                    LogSuccess(`lié`, view)
                    
                })


                LogMessage('Terminé', '')
 
                
            }

            else{

                LogError('Router', `Veuillez indiquer de la vue à definir par defaut`)
                
            }

        break;
        
        


        /**
         * Nettoyer le router ( Supprime toutes les vues qui n'existe plus )
         */
        case '-purge':

            /**
             * @type { RouterScheme }
             */
            const store = ProjectManager.LoadConfig(projectSlug, RouterScheme);

            store.items = (typeof store.items == 'object' && store.items) ? store.items : [];

            store.items = (Array.isArray(store.items)) ? store.items : [];
 
            const base = `app/views/`;



            ScanDirectory(base)

            .then(routes=>{

                if(routes){

                    const found = []

                    store.items.forEach(view=>{

                        if(routes.indexOf(view) === -1){
                            
                            LogError('Purgé', `${ view }`)

                        }

                        else{

                            found.push(view)

                            LogSuccess('Valide', `${ view }`)

                        }

                    })


                    store.items = found;

                    ProjectManager.SaveConfig(projectSlug, store)
    
                    LogMessage('Terminé', '')
     
                }

                else{

                    LogMessage('Terminé', 'Le dossier de vues est vide')

                }
                
            })
            


            

        break;
        
        


        /**
         * Nettoyer le router ( Supprime toutes les vues sans exception )
         */
        case '-clean':

            /**
             * @type { RouterScheme }
             */
            const data = ProjectManager.LoadConfig(projectSlug, RouterScheme);

            data.items = [];

            ProjectManager.SaveConfig(projectSlug, data)

            LogMessage('Terminé', '')

        break;
        
        
        


        /**
         * Construction de la route dans l'espace de développement
         */
        case '-build':

            /**
             * Formattage
             */
            views = (views) ? ((Array.isArray(views)) ? views : []) : [];

            
            /**
             * @type { RouterScheme }
             */
            const building = ProjectManager.LoadConfig(projectSlug, RouterScheme);

            building.items = (typeof building.items == 'object' && building.items) ? building.items : [];

            building.items = (Array.isArray(building.items)) ? building.items : [];

            const build = [];
                    

            (views.length ? views : building.items).forEach(view=>{

                const html = `${ $ProjectDir }/app/views/${ view }/index.html`

                
                if(fs.existsSync(html)){

                    const stats = fs.statSync(html);
                    
                    if(!stats.isDirectory()){

                        const to = `${ $ProjectDir }/public/sensen/views/${ view }.html`

                        fs.createReadStream(html).pipe(fs.createWriteStream( to ))

                        LogSuccess('Construit', `${ view }`)
                    
                        build.push( view );
                        
                    }

                    else{

                        LogError('Erreur', `${ view } n'est pas un dossier de vue`)
                    
                        LogMessage('Notice', `Si ${ view } est un dossier vérifié qu'il possède le fichier index.html`)

                    }

                }

                else{

                    LogError('Pas de liaison', `${ view }`)
                    
                }
                
                // LogSuccess(`lié`, view)
                
            })




            /**
             * Construction des index de route
             */

            build.forEach(async view=>{

                const script = path.resolve(__dirname, `${ $ProjectDir }/jsbundle/views/${ view }/index.js`)
                
                
                if(fs.existsSync(script)){
                    
                    _f48‍.g.console.log('Build', view, script, fs.chmodSync(script, 0o777) )

                    

                    _f48‍.i(`jsbundle/views/${ view }/index.js`)

                    .then(data=>{

                        _f48‍.g.console.log('Imported is', view, data,)

                    })

                    .catch(err=>{
    
                        _f48‍.g.console.error('Imported failed',script, view)
                        _f48‍.g.console.log(err)
                        
                    })
                    

                        
                    // .then(imperator=>{
    
                    //     console.log('Imported is', script, imperator)
                        
                    // })
    
                    // .catch(err=>{
    
                    //     console.error('Imported failed',script, view)
                        
                    // })
                    
                }

                else{

                    LogError('Erreur', `Aucun fichier de control trouvé dans la vue ${ view }`)
                    
                }
                
            })

            
            

            LogMessage('Terminé', '')

            
            

        break;
        
        
        
        

        default:

            LogError('Erreur', 'Fonction non valide')

        break;
        
        
    }


    // console.log('Router Manager : ', fn, arguments );


}




module.exports = RouterManager;


